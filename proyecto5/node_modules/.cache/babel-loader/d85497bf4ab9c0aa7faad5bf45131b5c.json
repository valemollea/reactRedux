{"ast":null,"code":"import _toPath from \"lodash/toPath\";\nimport { List, Map } from 'immutable';\nvar arrayPattern = /\\[(\\d+)\\]/;\n\nvar undefinedArrayMerge = function undefinedArrayMerge(previous, next) {\n  return next !== undefined ? next : previous;\n};\n\nvar mergeLists = function mergeLists(originalList, value) {\n  if (originalList && List.isList(originalList)) {\n    return originalList.map(function (originalListValue, index) {\n      return undefinedArrayMerge(value.get(index), originalListValue);\n    }).concat(value.slice(originalList.size));\n  }\n\n  return value;\n};\n\nvar assureComplexProps = function assureComplexProps(state, path) {\n  for (var pathPart = 1; pathPart < path.length; ++pathPart) {\n    var nextPart = path.slice(0, pathPart);\n\n    if (state.getIn(nextPart) == null) {\n      return state.setIn(nextPart, new Map());\n    }\n  }\n\n  return state;\n};\n/*\n * ImmutableJS' setIn function doesn't support array (List) creation\n * so we must pre-insert all arrays in the path ahead of time.\n * \n * Additionally we must also pre-set a dummy Map at the location\n * of an array index if there's parts that come afterwards because \n * the setIn function uses `{}` to mark an unset value instead of \n * undefined (which is the case for list / arrays).\n */\n\n\nexport default function setIn(state, field, value) {\n  var path = _toPath(field);\n\n  if (!field || typeof field !== 'string' || !arrayPattern.test(field)) {\n    var newState = assureComplexProps(state, path);\n    return newState.setIn(path, value);\n  }\n\n  return state.withMutations(function (mutable) {\n    var _loop = function _loop(pathIndex) {\n      var nextPart = path[pathIndex + 1];\n\n      if (isNaN(nextPart)) {\n        return \"continue\";\n      }\n\n      mutable = mutable.updateIn(path.slice(0, pathIndex + 1), function (value) {\n        return mergeLists(value, new List().set(parseInt(nextPart, 10), new Map()));\n      });\n    };\n\n    for (var pathIndex = 0; pathIndex < path.length - 1; ++pathIndex) {\n      var _ret = _loop(pathIndex);\n\n      if (_ret === \"continue\") continue;\n    }\n\n    return mutable.setIn(path, value);\n  });\n}","map":null,"metadata":{},"sourceType":"module"}