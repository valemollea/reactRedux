{"ast":null,"code":"import _toPath from \"lodash/toPath\";\nimport { Map, Iterable, List, fromJS as _fromJS } from 'immutable';\nimport deepEqual from './deepEqual';\nimport keys from './keys';\nimport setIn from './setIn';\nimport splice from './splice';\nimport plainGetIn from '../plain/getIn';\nvar emptyList = List();\nvar structure = {\n  allowsArrayErrors: false,\n  empty: Map(),\n  emptyList: emptyList,\n  getIn: function getIn(state, field) {\n    return Iterable.isIterable(state) ? state.getIn(_toPath(field)) : plainGetIn(state, field);\n  },\n  setIn: setIn,\n  deepEqual: deepEqual,\n  deleteIn: function deleteIn(state, field) {\n    return state.deleteIn(_toPath(field));\n  },\n  forEach: function forEach(items, callback) {\n    items.forEach(callback);\n  },\n  fromJS: function fromJS(jsValue) {\n    return _fromJS(jsValue, function (key, value) {\n      return Iterable.isIndexed(value) ? value.toList() : value.toMap();\n    });\n  },\n  keys: keys,\n  size: function size(list) {\n    return list ? list.size : 0;\n  },\n  some: function some(items, callback) {\n    return items.some(callback);\n  },\n  splice: splice,\n  equals: function equals(a, b) {\n    return b.equals(a) ? true : b.toSet().equals(a.toSet());\n  },\n  orderChanged: function orderChanged(a, b) {\n    return b.some(function (val, index) {\n      return val !== a.get(index);\n    });\n  },\n  toJS: function toJS(value) {\n    return Iterable.isIterable(value) ? value.toJS() : value;\n  }\n};\nexport default structure;","map":null,"metadata":{},"sourceType":"module"}